# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:06:37+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from starlette.requests import Request

from models import (
    OauthV1Certs,
    OauthV1DeviceCode,
    OauthV1OpenidDiscovery,
    OauthV1Token,
    OauthV1UserInfo,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Oauth',
    version='1.42.0',
    servers=[{'url': 'https://oauth.twilio.com'}],
)


@app.get(
    '/v1/.well-known/openid-configuration',
    description=""" Fetch configuration details about the OpenID Connect Authorization Server """,
    tags=[
        'openid_discovery_handling',
        'device_code_operations',
        'authentication_token_handling',
        'user_profile_access',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_openid_discovery():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/certs',
    description=""" Fetches public JWKs """,
    tags=[
        'openid_discovery_handling',
        'device_code_operations',
        'authentication_token_handling',
        'user_profile_access',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_certs():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/device/code',
    description=""" Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant """,
    tags=['openid_discovery_handling', 'authentication_token_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_device_code(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/token',
    description=""" Issues a new Access token (optionally identity_token & refresh_token) in exchange of Oauth grant """,
    tags=[
        'openid_discovery_handling',
        'device_code_operations',
        'authentication_token_handling',
        'user_profile_access',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_token(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/userinfo',
    description=""" Retrieves the consented UserInfo and other claims about the logged-in subject (end-user). """,
    tags=[
        'openid_discovery_handling',
        'device_code_operations',
        'authentication_token_handling',
        'user_profile_access',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_user_info():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
