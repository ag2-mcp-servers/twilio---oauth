# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:06:37+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, List, Optional

from pydantic import AnyUrl, BaseModel, Field, constr


class OauthV1Certs(BaseModel):
    keys: Optional[Any] = Field(
        None,
        description='A collection of certificates where are signed Twilio-issued tokens.',
    )
    url: Optional[AnyUrl] = None


class OauthV1DeviceCode(BaseModel):
    device_code: Optional[str] = Field(
        None, description='The device verification code.'
    )
    expires_in: Optional[int] = Field(
        None,
        description='The expiration time of the device_code and user_code in seconds.',
    )
    interval: Optional[int] = Field(
        None,
        description='The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.',
    )
    user_code: Optional[str] = Field(
        None,
        description='The verification code which end user uses to verify authorization request.',
    )
    verification_uri: Optional[str] = Field(
        None,
        description='The URI that the end user visits to verify authorization request.',
    )
    verification_uri_complete: Optional[str] = Field(
        None,
        description='The URI with user_code that the end-user alternatively visits to verify authorization request.',
    )


class OauthV1OpenidDiscovery(BaseModel):
    authorization_endpoint: Optional[AnyUrl] = Field(
        None, description='The endpoint that validates all authorization requests.'
    )
    claims_supported: Optional[List[str]] = Field(
        None,
        description='A collection of claims supported by authorization server for identity token',
    )
    device_authorization_endpoint: Optional[AnyUrl] = Field(
        None,
        description='The endpoint that validates all device code related authorization requests.',
    )
    id_token_signing_alg_values_supported: Optional[List[str]] = Field(
        None,
        description='A collection of JWS signing algorithms supported by authorization server to sign identity token.',
    )
    issuer: Optional[AnyUrl] = Field(
        None,
        description='The URL of the party that will create the token and sign it with its private key.',
    )
    jwk_uri: Optional[AnyUrl] = Field(
        None,
        description='The URL of your JSON Web Key Set. This set is a collection of JSON Web Keys, a standard method for representing cryptographic keys in a JSON structure.',
    )
    response_type_supported: Optional[List[str]] = Field(
        None,
        description='A collection of response type supported by authorization server.',
    )
    revocation_endpoint: Optional[AnyUrl] = Field(
        None,
        description='The endpoint used to revoke access or refresh tokens issued by the authorization server.',
    )
    scopes_supported: Optional[List[str]] = Field(
        None,
        description='A collection of scopes supported by authorization server for identity token',
    )
    subject_type_supported: Optional[List[str]] = Field(
        None, description='A collection of subject by authorization server.'
    )
    token_endpoint: Optional[AnyUrl] = Field(
        None,
        description='The URL of the token endpoint. After a client has received an authorization code, that code is presented to the token endpoint and exchanged for an identity token, an access token, and a refresh token.',
    )
    url: Optional[AnyUrl] = None
    userinfo_endpoint: Optional[AnyUrl] = Field(
        None,
        description='The URL of the user info endpoint, which returns user profile information to a client. Keep in mind that the user info endpoint returns only the information that has been requested.',
    )


class OauthV1Token(BaseModel):
    access_token: Optional[str] = Field(
        None,
        description='Token which carries the necessary information to access a Twilio resource directly.',
    )
    access_token_expires_at: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.',
    )
    id_token: Optional[str] = None
    refresh_token: Optional[str] = Field(
        None,
        description='Token which carries the information necessary to get a new access token.',
    )
    refresh_token_expires_at: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.',
    )


class OauthV1UserInfo(BaseModel):
    email: Optional[str] = Field(
        None, description="The end-user's preferred email address."
    )
    first_name: Optional[str] = Field(
        None, description='The first name of the end-user.'
    )
    friendly_name: Optional[str] = Field(
        None, description='The friendly name of the end-user.'
    )
    last_name: Optional[str] = Field(None, description='The last name of the end-user.')
    url: Optional[AnyUrl] = None
    user_sid: Optional[
        constr(pattern=r'^US[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The URL of the party that will create the token and sign it with its private key.',
    )


class V1DeviceCodePostRequest(BaseModel):
    Audiences: Optional[List[str]] = Field(
        None, description='An array of intended audiences for token requests'
    )
    ClientSid: str = Field(
        ...,
        description='A 34 character string that uniquely identifies this OAuth App.',
    )
    Scopes: List[str] = Field(
        ..., description='An Array of scopes for authorization request'
    )


class V1TokenPostRequest(BaseModel):
    ClientSecret: Optional[str] = Field(
        None, description='The credential for confidential OAuth App.'
    )
    ClientSid: str = Field(
        ...,
        description='A 34 character string that uniquely identifies this OAuth App.',
    )
    Code: Optional[str] = Field(
        None, description='JWT token related to the authorization code grant type.'
    )
    CodeVerifier: Optional[str] = Field(
        None, description='A code which is generation cryptographically.'
    )
    DeviceCode: Optional[str] = Field(
        None, description='JWT token related to the device code grant type.'
    )
    DeviceId: Optional[str] = Field(
        None,
        description='The Id of the device associated with the token (refresh token).',
    )
    GrantType: str = Field(
        ...,
        description="Grant type is a credential representing resource owner's authorization which can be used by client to obtain access token.",
    )
    RefreshToken: Optional[str] = Field(
        None, description='JWT token related to the refresh token grant type.'
    )
